<?php

use Symfony\Component\HttpFoundation\RedirectResponse;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Mail\MailManagerInterface;
use Drupal\Component\Utility\SafeMarkup;
use Drupal\Component\Utility\Html;
use Drupal\dam\Entity\FTPAccount;
use Drupal\dam\Entity\FileDirectory;
use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Session\AccountInterface;

/**
* Implements hook_cron.
*/
function dam_cron() {
  $config = \Drupal::config('dam.ftp_settings');
  if (!($config->get('dam_root_folder') == '' && $config->get('dam_root_folder') == '/')) {
    FileDirectory::updateDirectory( $config->get('dam_root_folder') );
  }
}


/**
* Implements hook_theme
*/
function dam_theme($existing, $type, $theme, $path) {

  $info = array();
  $info['dam_assets'] = [
    'variables' => array(
        'dam_control_menu' => NULL,
        'dam_action_menu' => NULL,
        'dam_display_menu' => null,
      ),
  ];

  $info['dam_ftp_account_info'] = [
    'variables' => [
      'account' => NULL,
      'server' => NULL,
      'port' => NULL,
      'username' => NULL,
      'password' => t('Use the password for your user account.')
    ]
  ];

  $info['dam_labels'] = [
    'render element' => 'form'
  ];

  return $info;
}

/**
 * Implements hook_entity_base_field_info
 */
function dam_entity_base_field_info (EntityTypeInterface $entity_type) {
  $fields = [];
   if ($entity_type->id() == 'file') {
      $fields['file_label'] = BaseFieldDefinition::create('entity_reference')
       ->setLabel(t('File Label'))
       ->setDescription(t('The file label of the File Label entity.'))
       ->setRevisionable(TRUE)
       ->setSetting('target_type', 'file_label')
       ->setSetting('handler', 'default')
       ->setCardinality(FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED)
       ->setDisplayOptions('form', [
         'type' => 'entity_reference_autocomplete',
         'weight' => -4,
         'settings' => [
           'match_operator' => 'CONTAINS',
           'size' => '60',
           'autocomplete_type' => 'tags',
           'placeholder' => '',
         ],
       ])
       ->setDisplayConfigurable('form', TRUE);

      $fields['directory'] = BaseFieldDefinition::create('entity_reference')
       ->setLabel(t('File directory'))
       ->setDescription(t('The file directory of the File directory entity.'))
       ->setRevisionable(TRUE)
       ->setSetting('target_type', 'file_directory')
       ->setSetting('handler', 'default')
       ->setDisplayOptions('form', [
         'type' => 'entity_reference_autocomplete',
         'weight' => -4,
         'settings' => [
           'match_operator' => 'CONTAINS',
           'size' => '60',
           'autocomplete_type' => 'tags',
           'placeholder' => '',
         ],
       ])
       ->setDisplayConfigurable('form', TRUE);

      $fields['description'] = BaseFieldDefinition::create('text_long')
       ->setLabel(t('Description'))
       ->setDescription(t('File description'))
       ->setDisplayOptions('form', array(
         'type'   => 'text_textarea',
         'weight' => -6
       ))
       ->setRequired(TRUE)
       ->setDisplayConfigurable('form', TRUE);

      $fields['junk'] = BaseFieldDefinition::create('boolean')
       ->setLabel(t('Junk'))
       ->setDescription(t('Indicates that folder is in the junk folder or not.'))
       ->setRevisionable(TRUE)
       ->setDefaultValue(TRUE)
       ->setSettings(['on_label' => 'Yes', 'off_label' => 'No'])
       ->setDisplayOptions('view', [
         'label' => 'visible',
         'type' => 'boolean',
         'weight' => -4,
       ])
       ->setDisplayOptions('form', [
         'type' => 'boolean_checkbox',
         'weight' => -4,
       ])
       ->setDisplayConfigurable('view', TRUE)
       ->setDisplayConfigurable('form', TRUE);

      $fields['comments'] = BaseFieldDefinition::create('comment')
       ->setLabel(t('Comments'))
       ->setDescription(t('Comments.'))
       ->setDisplayConfigurable('form', TRUE);

      $fields['file_keywords'] = BaseFieldDefinition::create('entity_reference')
       ->setSetting('target_type', 'taxonomy_term')
       ->setSetting('handler', 'default:taxonomy_term')
       ->setSetting('handler_settings', [
         'target_bundles' => [
         'file_keywords' => 'file_keywords'
         ]])
       ->setDisplayConfigurable('form', TRUE)
       ->setDisplayConfigurable('view', TRUE);
    }

    if ($entity_type->id() == 'user') {
      $fields['ftp_password'] = BaseFieldDefinition::create('string')
        ->setLabel(t('FTP Password'))
        ->setDescription(t('The password used for the ftp server.'))
        ->setRevisionable(TRUE)
        ->setSettings([
          'max_length' => 255,
          'text_processing' => 0,
        ])
        ->setDefaultValue('')
        ->setDisplayOptions('view', [
          'label' => 'above',
          'type' => 'string',
          'weight' => -4,
        ])
        ->setDisplayOptions('form', [
          'type' => 'string_textfield',
          'weight' => -4,
        ])
        ->setDisplayConfigurable('form', TRUE)
        ->setDisplayConfigurable('view', TRUE);
    }
    return $fields;
}

/**
 * Implements hook_mail().
 */
function dam_mail($key, &$message, $params) {
  switch ($key) {
    case 'dam_mail':
      $message['from'] = \Drupal::config('system.site')->get('mail');
      $message['subject'] = $params['subject'];
      $message['body'][] = Html::escape($params['message']);
      break;
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function dam_user_insert($entity) {
  FTPAccount::manageUserAccount($entity);
}

/**
* Implements hook_ENTITY_TYPE_update().
*/
function dam_user_update($entity) {
  FTPAccount::manageUserAccount($entity);
}

/**
* Implements hook_ENTITY_TYPE_update().
*/
function dam_user_delete($entity) {
  FTPAccount::deleteUserAccount($entity);
}

/**
* Implements hook_ENTITY_TYPE_access().
*/
function dam_file_directory_access(EntityInterface $entity, $operation, AccountInterface $account) {

  // First check if the user has specific access.
  $query = \Drupal::entityQuery('file_system_access');
  $query->condition('agent_type', 'user')
    ->condition('agent_id', $account->id())
    ->condition('entity_type', 'file_directory')
    ->condition('entity_id', $entity->id());

  if ($operation == 'view') {
    $query->condition('can_view', 1);
  }
  else if ($operation == 'edit' || $operation == 'delete') {
    $query->condition('can_write', 1);
  }
  $ids = $query->execute();
  if (count($ids) > 0) {
    return AccessResult::allowed();
  }

  // Second check if the user has a role that has access.
  $query = \Drupal::entityQuery('file_system_access');
  $query->condition('agent_type', 'role')
    ->condition('agent_id', $account->getRoles(), 'IN')
    ->condition('entity_type', 'file_directory')
    ->condition('entity_id', $entity->id());

  if ($operation == 'view') {
    $query->condition('can_view', 1);
  }
  else if ($operation == 'edit' || $operation == 'delete') {
    $query->condition('can_write', 1);
  }
  $ids = $query->execute();
  if (count($ids) > 0) {
    return AccessResult::allowed();
  }

  if ($account->hasPermission('administer dam')) {
    return AccessResult::allowed();
  }

  return AccessResult::forbidden();
}

/**
* Implements hook_ENTITY_TYPE_access().
*/
function dam_file_access(EntityInterface $entity, $operation, AccountInterface $account) {
  if ( !($entity->get('directory')->first()) || !($operation == 'view' || $operation == 'edit' || $operation == 'delete') ) {
     return AccessResult::neutral();
  }

  // First check if the user has specific access.
  $query = \Drupal::entityQuery('file_system_access');
  $query->condition('agent_type', 'user')
    ->condition('agent_id', $account->id())
    ->condition('entity_type', 'file')
    ->condition('entity_id', $entity->id());

  if ($operation == 'view') {
    $query->condition('can_view', 1);
  }
  else if ($operation == 'edit' || $operation == 'delete') {
    $query->condition('can_write', 1);
  }
  $ids = $query->execute();

  if (count($ids) > 0) {
    return AccessResult::allowed();
  }

  // Second check if the user has a role that has access.
  $query = \Drupal::entityQuery('file_system_access');
  $query->condition('agent_type', 'role')
    ->condition('agent_id', $account->getRoles(), 'IN')
    ->condition('entity_type', 'file')
    ->condition('entity_id', $entity->id());

  if ($operation == 'view') {
    $query->condition('can_view', 1);
  }
  else if ($operation == 'edit' || $operation == 'delete') {
    $query->condition('can_write', 1);
  }
  $ids = $query->execute();

  if (count($ids) > 0) {
    return AccessResult::allowed();
  }

  if ($account->hasPermission('administer dam')) {
    return AccessResult::allowed();
  }

  return AccessResult::forbidden();
}

/**
 * Implements hook_ENTITY_TYPE_access().
 */
function dam_file_label_access(EntityInterface $entity, $operation, AccountInterface $account) {

  // First check if the user has specific access.
  $query = \Drupal::entityQuery('file_system_access');
  $query->condition('agent_type', 'user')
    ->condition('agent_id', $account->id())
    ->condition('entity_type', 'file_label')
    ->condition('entity_id', $entity->id());

  if ($operation == 'view') {
    $query->condition('can_view', 1);
  }
  else if ($operation == 'edit' || $operation == 'delete') {
    $query->condition('can_write', 1);
  }
  $ids = $query->execute();
  if (count($ids) > 0) {
    return AccessResult::allowed();
  }

  // Second check if the user has a role that has access.
  $query = \Drupal::entityQuery('file_system_access');
  $query->condition('agent_type', 'role')
    ->condition('agent_id', $account->getRoles(), 'IN')
    ->condition('entity_type', 'file_label')
    ->condition('entity_id', $entity->id());

  if ($operation == 'view') {
    $query->condition('can_view', 1);
  }
  else if ($operation == 'edit' || $operation == 'delete') {
    $query->condition('can_write', 1);
  }
  $ids = $query->execute();
  if (count($ids) > 0) {
    return AccessResult::allowed();
  }

  if ($account->hasPermission('administer dam')) {
    // return AccessResult::allowed();
  }

  return AccessResult::forbidden();
}


/**
   * Generate file tree.
   *
   * @param string $path
   *   Path to the files and folder.
   *
   * @return string
   *   Returns file tree structure.
   */
  function dam_generate_file_tree($path) {
    $dirPath = urldecode($path);
    $fileTree = "";
    if( file_exists($dirPath) ) {
      $files = scandir($dirPath);
      natcasesort($files);

      if( count($files) > 2 ) { /* The 2 accounts for . and .. */
        $fileTree = "<ul class=\"jqueryFileTree\">";
        // All dirs
        foreach( $files as $file ) {
          if( file_exists($dirPath . '/' . $file) && $file != '.' && $file != '..' && is_dir($dirPath . '/' . $file) ) {
            $fileTree .= "<li class=\"directory collapsed\"><a href=\"#\" rel=\"" . htmlentities($dirPath . '/' . $file) . "/\">" . htmlentities($file) . "</a></li>";
            $fileTree .= dam_generate_file_tree($dirPath . '/' . $file);
          }
        }
        // All files
        foreach( $files as $file ) {
          if( file_exists($dirPath . '/' . $file) && $file != '.' && $file != '..' && !is_dir($dirPath . '/' . $file) ) {
            $ext = preg_replace('/^.*\./', '', $file);
            $fileTree .= "<li class=\"file ext_$ext\"><a href=\"#\" rel=\"" . htmlentities($dirPath . '/' . $file) . "\">" . htmlentities($file) . "</a></li>";
          }
        }
        $fileTree .= "</ul>";
      }
    }
    return $fileTree;
  }

  /**
  * Implements hook_file_download
  */
  function dam_file_download($uri) {
    $files = entity_load_multiple_by_properties('file', [
      'uri' => $uri,
    ]);
    $scheme = file_uri_scheme($uri);
    $target = file_uri_target($uri);
    $account = entity_load('user', \Drupal::currentUser()->id());

    if (count($files) && $scheme == 'dam') {
        $file = array_shift($files);
        if ($file->access('view', $account)) {
          $headers = file_get_content_headers($file);
          return $headers;
        }
        else {
          header('HTTP/1.1 401 Unauthorized', true, 401);
          exit();
        }
    }
  }
